// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: product.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_product_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_product_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "github.com/gogo/protobuf/gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_product_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_product_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_product_2eproto;
namespace productpb {
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class NewRequest;
struct NewRequestDefaultTypeInternal;
extern NewRequestDefaultTypeInternal _NewRequest_default_instance_;
class NewRequest_MetadataEntry_DoNotUse;
struct NewRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern NewRequest_MetadataEntry_DoNotUseDefaultTypeInternal _NewRequest_MetadataEntry_DoNotUse_default_instance_;
class Product;
struct ProductDefaultTypeInternal;
extern ProductDefaultTypeInternal _Product_default_instance_;
class Product_MetadataEntry_DoNotUse;
struct Product_MetadataEntry_DoNotUseDefaultTypeInternal;
extern Product_MetadataEntry_DoNotUseDefaultTypeInternal _Product_MetadataEntry_DoNotUse_default_instance_;
}  // namespace productpb
PROTOBUF_NAMESPACE_OPEN
template<> ::productpb::Empty* Arena::CreateMaybeMessage<::productpb::Empty>(Arena*);
template<> ::productpb::GetRequest* Arena::CreateMaybeMessage<::productpb::GetRequest>(Arena*);
template<> ::productpb::NewRequest* Arena::CreateMaybeMessage<::productpb::NewRequest>(Arena*);
template<> ::productpb::NewRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::productpb::NewRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::productpb::Product* Arena::CreateMaybeMessage<::productpb::Product>(Arena*);
template<> ::productpb::Product_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::productpb::Product_MetadataEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace productpb {

// ===================================================================

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:productpb.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  ~Empty() override;
  explicit constexpr Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return new Empty();
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Empty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Empty& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "productpb.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:productpb.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_product_2eproto;
};
// -------------------------------------------------------------------

class Product_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Product_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Product_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Product_MetadataEntry_DoNotUse();
  explicit constexpr Product_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Product_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Product_MetadataEntry_DoNotUse& other);
  static const Product_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Product_MetadataEntry_DoNotUse*>(&_Product_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "productpb.Product.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "productpb.Product.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Product final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:productpb.Product) */ {
 public:
  inline Product() : Product(nullptr) {}
  ~Product() override;
  explicit constexpr Product(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Product(const Product& from);
  Product(Product&& from) noexcept
    : Product() {
    *this = ::std::move(from);
  }

  inline Product& operator=(const Product& from) {
    CopyFrom(from);
    return *this;
  }
  inline Product& operator=(Product&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Product& default_instance() {
    return *internal_default_instance();
  }
  static inline const Product* internal_default_instance() {
    return reinterpret_cast<const Product*>(
               &_Product_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Product& a, Product& b) {
    a.Swap(&b);
  }
  inline void Swap(Product* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Product* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Product* New() const final {
    return new Product();
  }

  Product* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Product>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Product& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Product& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Product* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "productpb.Product";
  }
  protected:
  explicit Product(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 4,
    kImagesFieldNumber = 6,
    kMetadataFieldNumber = 7,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 5,
    kUrlFieldNumber = 9,
    kActiveFieldNumber = 3,
    kCreatedFieldNumber = 998,
    kUpdatedFieldNumber = 999,
  };
  // repeated string attributes = 4;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  const std::string& attributes(int index) const;
  std::string* mutable_attributes(int index);
  void set_attributes(int index, const std::string& value);
  void set_attributes(int index, std::string&& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const char* value, size_t size);
  std::string* add_attributes();
  void add_attributes(const std::string& value);
  void add_attributes(std::string&& value);
  void add_attributes(const char* value);
  void add_attributes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributes();
  private:
  const std::string& _internal_attributes(int index) const;
  std::string* _internal_add_attributes();
  public:

  // repeated string images = 6;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  const std::string& images(int index) const;
  std::string* mutable_images(int index);
  void set_images(int index, const std::string& value);
  void set_images(int index, std::string&& value);
  void set_images(int index, const char* value);
  void set_images(int index, const char* value, size_t size);
  std::string* add_images();
  void add_images(const std::string& value);
  void add_images(std::string&& value);
  void add_images(const char* value);
  void add_images(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& images() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_images();
  private:
  const std::string& _internal_images(int index) const;
  std::string* _internal_add_images();
  public:

  // map<string, string> metadata = 7;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string url = 9;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bool active = 3;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // int64 created = 998;
  void clear_created();
  ::PROTOBUF_NAMESPACE_ID::int64 created() const;
  void set_created(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created() const;
  void _internal_set_created(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updated = 999;
  void clear_updated();
  ::PROTOBUF_NAMESPACE_ID::int64 updated() const;
  void set_updated(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updated() const;
  void _internal_set_updated(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:productpb.Product)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> images_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Product_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  bool active_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_;
  ::PROTOBUF_NAMESPACE_ID::int64 updated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_product_2eproto;
};
// -------------------------------------------------------------------

class NewRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NewRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NewRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  NewRequest_MetadataEntry_DoNotUse();
  explicit constexpr NewRequest_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit NewRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NewRequest_MetadataEntry_DoNotUse& other);
  static const NewRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NewRequest_MetadataEntry_DoNotUse*>(&_NewRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "productpb.NewRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "productpb.NewRequest.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class NewRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:productpb.NewRequest) */ {
 public:
  inline NewRequest() : NewRequest(nullptr) {}
  ~NewRequest() override;
  explicit constexpr NewRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewRequest(const NewRequest& from);
  NewRequest(NewRequest&& from) noexcept
    : NewRequest() {
    *this = ::std::move(from);
  }

  inline NewRequest& operator=(const NewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewRequest& operator=(NewRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewRequest* internal_default_instance() {
    return reinterpret_cast<const NewRequest*>(
               &_NewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NewRequest& a, NewRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NewRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewRequest* New() const final {
    return new NewRequest();
  }

  NewRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NewRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "productpb.NewRequest";
  }
  protected:
  explicit NewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 3,
    kImagesFieldNumber = 5,
    kMetadataFieldNumber = 6,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 4,
    kUrlFieldNumber = 8,
    kActiveFieldNumber = 2,
  };
  // repeated string attributes = 3 [(.gogoproto.moretags) = "validate:\"dive,required\""];
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  const std::string& attributes(int index) const;
  std::string* mutable_attributes(int index);
  void set_attributes(int index, const std::string& value);
  void set_attributes(int index, std::string&& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const char* value, size_t size);
  std::string* add_attributes();
  void add_attributes(const std::string& value);
  void add_attributes(std::string&& value);
  void add_attributes(const char* value);
  void add_attributes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributes();
  private:
  const std::string& _internal_attributes(int index) const;
  std::string* _internal_add_attributes();
  public:

  // repeated string images = 5 [(.gogoproto.moretags) = "validate:\"dive,url\""];
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  const std::string& images(int index) const;
  std::string* mutable_images(int index);
  void set_images(int index, const std::string& value);
  void set_images(int index, std::string&& value);
  void set_images(int index, const char* value);
  void set_images(int index, const char* value, size_t size);
  std::string* add_images();
  void add_images(const std::string& value);
  void add_images(std::string&& value);
  void add_images(const char* value);
  void add_images(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& images() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_images();
  private:
  const std::string& _internal_images(int index) const;
  std::string* _internal_add_images();
  public:

  // map<string, string> metadata = 6 [(.gogoproto.moretags) = "validate:\"\""];
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string name = 1 [(.gogoproto.moretags) = "validate:\"required,gte=2\""];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 4 [(.gogoproto.moretags) = "validate:\"gt=0,lt=2056\""];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string url = 8 [(.gogoproto.moretags) = "validate:\"omitempty,url\""];
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bool active = 2 [(.gogoproto.moretags) = "validate:\"required\""];
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:productpb.NewRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> images_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NewRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  bool active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_product_2eproto;
};
// -------------------------------------------------------------------

class GetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:productpb.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  ~GetRequest() override;
  explicit constexpr GetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return new GetRequest();
  }

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "productpb.GetRequest";
  }
  protected:
  explicit GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.gogoproto.moretags) = "validate:\"required,uuid4\""];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:productpb.GetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_product_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Product

// string id = 1;
inline void Product::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Product::id() const {
  // @@protoc_insertion_point(field_get:productpb.Product.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Product::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:productpb.Product.id)
}
inline std::string* Product::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:productpb.Product.id)
  return _s;
}
inline const std::string& Product::_internal_id() const {
  return id_.Get();
}
inline void Product::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Product::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Product::release_id() {
  // @@protoc_insertion_point(field_release:productpb.Product.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Product::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:productpb.Product.id)
}

// string name = 2;
inline void Product::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Product::name() const {
  // @@protoc_insertion_point(field_get:productpb.Product.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Product::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:productpb.Product.name)
}
inline std::string* Product::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:productpb.Product.name)
  return _s;
}
inline const std::string& Product::_internal_name() const {
  return name_.Get();
}
inline void Product::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Product::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Product::release_name() {
  // @@protoc_insertion_point(field_release:productpb.Product.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Product::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:productpb.Product.name)
}

// bool active = 3;
inline void Product::clear_active() {
  active_ = false;
}
inline bool Product::_internal_active() const {
  return active_;
}
inline bool Product::active() const {
  // @@protoc_insertion_point(field_get:productpb.Product.active)
  return _internal_active();
}
inline void Product::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void Product::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:productpb.Product.active)
}

// repeated string attributes = 4;
inline int Product::_internal_attributes_size() const {
  return attributes_.size();
}
inline int Product::attributes_size() const {
  return _internal_attributes_size();
}
inline void Product::clear_attributes() {
  attributes_.Clear();
}
inline std::string* Product::add_attributes() {
  std::string* _s = _internal_add_attributes();
  // @@protoc_insertion_point(field_add_mutable:productpb.Product.attributes)
  return _s;
}
inline const std::string& Product::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const std::string& Product::attributes(int index) const {
  // @@protoc_insertion_point(field_get:productpb.Product.attributes)
  return _internal_attributes(index);
}
inline std::string* Product::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:productpb.Product.attributes)
  return attributes_.Mutable(index);
}
inline void Product::set_attributes(int index, const std::string& value) {
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:productpb.Product.attributes)
}
inline void Product::set_attributes(int index, std::string&& value) {
  attributes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:productpb.Product.attributes)
}
inline void Product::set_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:productpb.Product.attributes)
}
inline void Product::set_attributes(int index, const char* value, size_t size) {
  attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:productpb.Product.attributes)
}
inline std::string* Product::_internal_add_attributes() {
  return attributes_.Add();
}
inline void Product::add_attributes(const std::string& value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:productpb.Product.attributes)
}
inline void Product::add_attributes(std::string&& value) {
  attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:productpb.Product.attributes)
}
inline void Product::add_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:productpb.Product.attributes)
}
inline void Product::add_attributes(const char* value, size_t size) {
  attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:productpb.Product.attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Product::attributes() const {
  // @@protoc_insertion_point(field_list:productpb.Product.attributes)
  return attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Product::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:productpb.Product.attributes)
  return &attributes_;
}

// string description = 5;
inline void Product::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Product::description() const {
  // @@protoc_insertion_point(field_get:productpb.Product.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Product::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:productpb.Product.description)
}
inline std::string* Product::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:productpb.Product.description)
  return _s;
}
inline const std::string& Product::_internal_description() const {
  return description_.Get();
}
inline void Product::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Product::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Product::release_description() {
  // @@protoc_insertion_point(field_release:productpb.Product.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Product::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:productpb.Product.description)
}

// repeated string images = 6;
inline int Product::_internal_images_size() const {
  return images_.size();
}
inline int Product::images_size() const {
  return _internal_images_size();
}
inline void Product::clear_images() {
  images_.Clear();
}
inline std::string* Product::add_images() {
  std::string* _s = _internal_add_images();
  // @@protoc_insertion_point(field_add_mutable:productpb.Product.images)
  return _s;
}
inline const std::string& Product::_internal_images(int index) const {
  return images_.Get(index);
}
inline const std::string& Product::images(int index) const {
  // @@protoc_insertion_point(field_get:productpb.Product.images)
  return _internal_images(index);
}
inline std::string* Product::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:productpb.Product.images)
  return images_.Mutable(index);
}
inline void Product::set_images(int index, const std::string& value) {
  images_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:productpb.Product.images)
}
inline void Product::set_images(int index, std::string&& value) {
  images_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:productpb.Product.images)
}
inline void Product::set_images(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  images_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:productpb.Product.images)
}
inline void Product::set_images(int index, const char* value, size_t size) {
  images_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:productpb.Product.images)
}
inline std::string* Product::_internal_add_images() {
  return images_.Add();
}
inline void Product::add_images(const std::string& value) {
  images_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:productpb.Product.images)
}
inline void Product::add_images(std::string&& value) {
  images_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:productpb.Product.images)
}
inline void Product::add_images(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  images_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:productpb.Product.images)
}
inline void Product::add_images(const char* value, size_t size) {
  images_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:productpb.Product.images)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Product::images() const {
  // @@protoc_insertion_point(field_list:productpb.Product.images)
  return images_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Product::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:productpb.Product.images)
  return &images_;
}

// map<string, string> metadata = 7;
inline int Product::_internal_metadata_size() const {
  return metadata_.size();
}
inline int Product::metadata_size() const {
  return _internal_metadata_size();
}
inline void Product::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Product::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Product::metadata() const {
  // @@protoc_insertion_point(field_map:productpb.Product.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Product::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Product::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:productpb.Product.metadata)
  return _internal_mutable_metadata();
}

// string url = 9;
inline void Product::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& Product::url() const {
  // @@protoc_insertion_point(field_get:productpb.Product.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Product::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:productpb.Product.url)
}
inline std::string* Product::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:productpb.Product.url)
  return _s;
}
inline const std::string& Product::_internal_url() const {
  return url_.Get();
}
inline void Product::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Product::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Product::release_url() {
  // @@protoc_insertion_point(field_release:productpb.Product.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Product::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:productpb.Product.url)
}

// int64 created = 998;
inline void Product::clear_created() {
  created_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Product::_internal_created() const {
  return created_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Product::created() const {
  // @@protoc_insertion_point(field_get:productpb.Product.created)
  return _internal_created();
}
inline void Product::_internal_set_created(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_ = value;
}
inline void Product::set_created(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created(value);
  // @@protoc_insertion_point(field_set:productpb.Product.created)
}

// int64 updated = 999;
inline void Product::clear_updated() {
  updated_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Product::_internal_updated() const {
  return updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Product::updated() const {
  // @@protoc_insertion_point(field_get:productpb.Product.updated)
  return _internal_updated();
}
inline void Product::_internal_set_updated(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updated_ = value;
}
inline void Product::set_updated(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updated(value);
  // @@protoc_insertion_point(field_set:productpb.Product.updated)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NewRequest

// string name = 1 [(.gogoproto.moretags) = "validate:\"required,gte=2\""];
inline void NewRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NewRequest::name() const {
  // @@protoc_insertion_point(field_get:productpb.NewRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:productpb.NewRequest.name)
}
inline std::string* NewRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:productpb.NewRequest.name)
  return _s;
}
inline const std::string& NewRequest::_internal_name() const {
  return name_.Get();
}
inline void NewRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NewRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NewRequest::release_name() {
  // @@protoc_insertion_point(field_release:productpb.NewRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NewRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:productpb.NewRequest.name)
}

// bool active = 2 [(.gogoproto.moretags) = "validate:\"required\""];
inline void NewRequest::clear_active() {
  active_ = false;
}
inline bool NewRequest::_internal_active() const {
  return active_;
}
inline bool NewRequest::active() const {
  // @@protoc_insertion_point(field_get:productpb.NewRequest.active)
  return _internal_active();
}
inline void NewRequest::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void NewRequest::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:productpb.NewRequest.active)
}

// repeated string attributes = 3 [(.gogoproto.moretags) = "validate:\"dive,required\""];
inline int NewRequest::_internal_attributes_size() const {
  return attributes_.size();
}
inline int NewRequest::attributes_size() const {
  return _internal_attributes_size();
}
inline void NewRequest::clear_attributes() {
  attributes_.Clear();
}
inline std::string* NewRequest::add_attributes() {
  std::string* _s = _internal_add_attributes();
  // @@protoc_insertion_point(field_add_mutable:productpb.NewRequest.attributes)
  return _s;
}
inline const std::string& NewRequest::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const std::string& NewRequest::attributes(int index) const {
  // @@protoc_insertion_point(field_get:productpb.NewRequest.attributes)
  return _internal_attributes(index);
}
inline std::string* NewRequest::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:productpb.NewRequest.attributes)
  return attributes_.Mutable(index);
}
inline void NewRequest::set_attributes(int index, const std::string& value) {
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:productpb.NewRequest.attributes)
}
inline void NewRequest::set_attributes(int index, std::string&& value) {
  attributes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:productpb.NewRequest.attributes)
}
inline void NewRequest::set_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:productpb.NewRequest.attributes)
}
inline void NewRequest::set_attributes(int index, const char* value, size_t size) {
  attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:productpb.NewRequest.attributes)
}
inline std::string* NewRequest::_internal_add_attributes() {
  return attributes_.Add();
}
inline void NewRequest::add_attributes(const std::string& value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:productpb.NewRequest.attributes)
}
inline void NewRequest::add_attributes(std::string&& value) {
  attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:productpb.NewRequest.attributes)
}
inline void NewRequest::add_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:productpb.NewRequest.attributes)
}
inline void NewRequest::add_attributes(const char* value, size_t size) {
  attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:productpb.NewRequest.attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NewRequest::attributes() const {
  // @@protoc_insertion_point(field_list:productpb.NewRequest.attributes)
  return attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NewRequest::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:productpb.NewRequest.attributes)
  return &attributes_;
}

// string description = 4 [(.gogoproto.moretags) = "validate:\"gt=0,lt=2056\""];
inline void NewRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& NewRequest::description() const {
  // @@protoc_insertion_point(field_get:productpb.NewRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:productpb.NewRequest.description)
}
inline std::string* NewRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:productpb.NewRequest.description)
  return _s;
}
inline const std::string& NewRequest::_internal_description() const {
  return description_.Get();
}
inline void NewRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NewRequest::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NewRequest::release_description() {
  // @@protoc_insertion_point(field_release:productpb.NewRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NewRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:productpb.NewRequest.description)
}

// repeated string images = 5 [(.gogoproto.moretags) = "validate:\"dive,url\""];
inline int NewRequest::_internal_images_size() const {
  return images_.size();
}
inline int NewRequest::images_size() const {
  return _internal_images_size();
}
inline void NewRequest::clear_images() {
  images_.Clear();
}
inline std::string* NewRequest::add_images() {
  std::string* _s = _internal_add_images();
  // @@protoc_insertion_point(field_add_mutable:productpb.NewRequest.images)
  return _s;
}
inline const std::string& NewRequest::_internal_images(int index) const {
  return images_.Get(index);
}
inline const std::string& NewRequest::images(int index) const {
  // @@protoc_insertion_point(field_get:productpb.NewRequest.images)
  return _internal_images(index);
}
inline std::string* NewRequest::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:productpb.NewRequest.images)
  return images_.Mutable(index);
}
inline void NewRequest::set_images(int index, const std::string& value) {
  images_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:productpb.NewRequest.images)
}
inline void NewRequest::set_images(int index, std::string&& value) {
  images_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:productpb.NewRequest.images)
}
inline void NewRequest::set_images(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  images_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:productpb.NewRequest.images)
}
inline void NewRequest::set_images(int index, const char* value, size_t size) {
  images_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:productpb.NewRequest.images)
}
inline std::string* NewRequest::_internal_add_images() {
  return images_.Add();
}
inline void NewRequest::add_images(const std::string& value) {
  images_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:productpb.NewRequest.images)
}
inline void NewRequest::add_images(std::string&& value) {
  images_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:productpb.NewRequest.images)
}
inline void NewRequest::add_images(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  images_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:productpb.NewRequest.images)
}
inline void NewRequest::add_images(const char* value, size_t size) {
  images_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:productpb.NewRequest.images)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NewRequest::images() const {
  // @@protoc_insertion_point(field_list:productpb.NewRequest.images)
  return images_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NewRequest::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:productpb.NewRequest.images)
  return &images_;
}

// map<string, string> metadata = 6 [(.gogoproto.moretags) = "validate:\"\""];
inline int NewRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int NewRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void NewRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NewRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NewRequest::metadata() const {
  // @@protoc_insertion_point(field_map:productpb.NewRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NewRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NewRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:productpb.NewRequest.metadata)
  return _internal_mutable_metadata();
}

// string url = 8 [(.gogoproto.moretags) = "validate:\"omitempty,url\""];
inline void NewRequest::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& NewRequest::url() const {
  // @@protoc_insertion_point(field_get:productpb.NewRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewRequest::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:productpb.NewRequest.url)
}
inline std::string* NewRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:productpb.NewRequest.url)
  return _s;
}
inline const std::string& NewRequest::_internal_url() const {
  return url_.Get();
}
inline void NewRequest::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NewRequest::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NewRequest::release_url() {
  // @@protoc_insertion_point(field_release:productpb.NewRequest.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NewRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:productpb.NewRequest.url)
}

// -------------------------------------------------------------------

// GetRequest

// string id = 1 [(.gogoproto.moretags) = "validate:\"required,uuid4\""];
inline void GetRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetRequest::id() const {
  // @@protoc_insertion_point(field_get:productpb.GetRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:productpb.GetRequest.id)
}
inline std::string* GetRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:productpb.GetRequest.id)
  return _s;
}
inline const std::string& GetRequest::_internal_id() const {
  return id_.Get();
}
inline void GetRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRequest::release_id() {
  // @@protoc_insertion_point(field_release:productpb.GetRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:productpb.GetRequest.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace productpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_product_2eproto
